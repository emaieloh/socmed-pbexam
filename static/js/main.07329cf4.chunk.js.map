{"version":3,"sources":["MyContext.js","Navigation/NavbarBS.js","Homepage/Home.js","Registration/Registration.js","Comments/CommentBox.js","Posts/Post.js","Posts/Posts.js","Posts/PostDetail.js","Posts/CreatePost.js","App.js","serviceWorker.js","MyProvider.js","index.js"],"names":["MyContext","createContext","NavbarBS","id","Navbar","bg","expand","variant","fixed","NavbarBrand","this","props","user","username","Toggle","aria-controls","Collapse","Nav","className","to","onClick","logout","React","Component","Home","state","email","password","emailError","passwordError","inputChangeHandler","e","setState","target","name","value","errorHandler","login","userCredential","Container","Jumbotron","Row","Col","Form","FormGroup","FormControl","type","placeholder","onChange","Button","block","Registration","confirmPassword","usernameError","confirmPasswordError","register","axios","post","then","CommentBox","comment","getComment","addCommentHandler","newComment","body","_id","alert","addComment","md","as","rows","size","Post","useContext","likePost","Image","src","image","alt","thumbnail","JSON","parse","localStorage","getItem","deletePost","substring","comments","length","console","log","thumbsUp","Posts","posts","allPosts","map","key","lg","PostDetail","postComments","fluid","CreatePost","newPost","newImage","getPost","getImage","addPostHandler","addPost","xs","App","isLoggedin","showPost","path","exact","Boolean","window","location","hostname","match","MyProvider","res","data","error","setItem","stringify","removeItem","splice","indexOf","delete","postId","push","likedPost","Provider","children","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.07329cf4.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nconst MyContext = createContext();\r\n\r\nexport default MyContext;","import React from \"react\";\r\nimport { Navbar, NavbarBrand, Nav } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass NavbarBS extends React.Component {\r\n    render() {\r\n        return(\r\n            <div id=\"navbar\">\r\n                <Navbar bg=\"success\" expand=\"lg\" variant=\"dark\" fixed=\"top\">\r\n                    <NavbarBrand>Welcome to SocMed, {this.props.user.username}</NavbarBrand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Link to=\"/\" className=\"nav-item\">\r\n                                View Posts\r\n                            </Link>\r\n                            <Link to=\"/create-post\" className=\"nav-item\">\r\n                                Create Post\r\n                            </Link>\r\n                        </Nav>\r\n                        <Nav id=\"sign-out\" className=\"ml-auto\">\r\n                            <Link to=\"/\" onClick={this.props.logout}>\r\n                                Sign Out\r\n                            </Link>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavbarBS;","import React from \"react\";\r\nimport { Jumbotron, Container, Row, Col, Form, FormControl, FormGroup, Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Home extends React.Component {\r\n    state = {\r\n        email: \"\",\r\n        password: \"\",\r\n        emailError: \"\",\r\n        passwordError: \"\"\r\n    }\r\n    inputChangeHandler = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    errorHandler = () => {\r\n        if(this.state.email === \"\") {\r\n            this.setState({\r\n                emailError: \"This field is required\"\r\n            })\r\n        } else {\r\n            this.setState({\r\n                emailError: \"\"\r\n            })\r\n        }\r\n        if(this.state.password === \"\") {\r\n            this.setState({\r\n                passwordError: \"This field is required\"\r\n            })\r\n        } else {\r\n            this.setState({\r\n                passwordError: \"\"\r\n            })\r\n        }\r\n    }\r\n    login = () => {\r\n        this.errorHandler();\r\n        if(this.state.email !== \"\" && this.state.password !== \"\") {\r\n            this.props.userCredential(this.state.email, this.state.password);\r\n        }\r\n    }\r\n    render() {\r\n        return(\r\n            <div id=\"home\">\r\n                <Container>\r\n                    <Jumbotron>\r\n                        <Container>\r\n                            <Row>\r\n                                <Col>\r\n                                    <h1>SocMed</h1>\r\n                                    <p className=\"text\">Broaden your perspective with different opinions on SocMed.</p>\r\n                                </Col>\r\n                                <Col id=\"home-form\">\r\n                                    <Form>\r\n                                        <FormGroup>\r\n                                            <FormControl \r\n                                                type=\"email\" \r\n                                                placeholder=\"Email\" \r\n                                                name=\"email\" \r\n                                                value={this.state.email} \r\n                                                onChange={this.inputChangeHandler}\r\n                                            />\r\n                                            <div className=\"error-msg\">\r\n                                                <small>{this.state.emailError}</small>\r\n                                            </div>\r\n                                        </FormGroup>\r\n                                        <FormGroup>\r\n                                            <FormControl \r\n                                                type=\"password\" \r\n                                                placeholder=\"Password\" \r\n                                                name=\"password\" \r\n                                                value={this.state.password} \r\n                                                onChange={this.inputChangeHandler}\r\n                                            />\r\n                                            <div className=\"error-msg\">\r\n                                                <small>{this.state.passwordError}</small>\r\n                                            </div>\r\n                                        </FormGroup>\r\n                                        <Button \r\n                                            variant=\"success\" \r\n                                            onClick={this.login} \r\n                                            block\r\n                                        >\r\n                                            Log In\r\n                                        </Button>\r\n                                        <hr/>\r\n                                        <Link to=\"/registration\">\r\n                                            <Button variant=\"info\" block>Sign Up </Button>\r\n                                        </Link>\r\n                                        <p className=\"sign-up\">Not yet registered? Click <span>\"Sign Up\"</span>.</p>\r\n                                    </Form>\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </Jumbotron>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Form, Row, Col, FormControl, FormGroup, Jumbotron, Container, Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Registration extends React.Component {\r\n    state = {\r\n        username: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        usernameError: \"\",\r\n        emailError: \"\",\r\n        passwordError: \"\",\r\n        confirmPasswordError: \"\"\r\n    }\r\n    inputChangeHandler = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    errorHandler = () => {\r\n        if(this.state.username === \"\") {\r\n            this.setState({\r\n                usernameError: \"This field is required\"\r\n            })\r\n        } else {\r\n            this.setState({\r\n                usernameError: \"\"\r\n            })\r\n        }\r\n        if(this.state.email === \"\") {\r\n            this.setState({\r\n                emailError: \"This field is required\"\r\n            })\r\n        } else {\r\n            this.setState({\r\n                emailError: \"\"\r\n            })\r\n        }\r\n        if(this.state.password === \"\") {\r\n            this.setState({\r\n                passwordError: \"This field is required\"\r\n            })\r\n        } else {\r\n            this.setState({\r\n                passwordError: \"\"\r\n            })\r\n        }\r\n        if(this.state.confirmPassword !== this.state.password) {\r\n            this.setState({\r\n                confirmPasswordError: \"Password didn't match\"\r\n            })\r\n        } else {\r\n            this.setState({\r\n                confirmPasswordError: \"\"\r\n            })\r\n        }\r\n    }\r\n    register = () => {\r\n        this.errorHandler();\r\n        if((this.state.username !== \"\") \r\n            && (this.state.email !== \"\") \r\n            && (this.state.password !== \"\") \r\n            && (this.state.password === this.state.confirmPassword)\r\n        ) {\r\n            axios.post(\"https://socmed-pbexam.herokuapp.com/users/register\", {\r\n                username: this.state.username,\r\n                email: this.state.email,\r\n                password: this.state.password\r\n            })\r\n            .then(() => {\r\n                this.props.userCredential(this.state.email, this.state.password);\r\n                this.setState({\r\n                    username: \"\",\r\n                    email: \"\",\r\n                    password: \"\",\r\n                    confirmPassword: \"\"\r\n                })\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return(\r\n            <div id=\"registration\">\r\n                <Container>\r\n                    <Jumbotron>\r\n                        <Form>\r\n                            <FormGroup>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <FormControl \r\n                                            type=\"text\" \r\n                                            placeholder=\"Username\" \r\n                                            name=\"username\" \r\n                                            value={this.state.username} \r\n                                            onChange={this.inputChangeHandler}\r\n                                        />\r\n                                        <div className=\"error-msg\">\r\n                                            <small>{this.state.usernameError}</small>\r\n                                        </div>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <FormControl \r\n                                            type=\"email\" \r\n                                            placeholder=\"Email\" \r\n                                            name=\"email\" \r\n                                            value={this.state.email} \r\n                                            onChange={this.inputChangeHandler}\r\n                                        />\r\n                                        <div className=\"error-msg\">\r\n                                            <small>{this.state.emailError}</small>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <FormControl \r\n                                            type=\"password\" \r\n                                            placeholder=\"Password\" \r\n                                            name=\"password\" \r\n                                            value={this.state.password} \r\n                                            onChange={this.inputChangeHandler}\r\n                                        />\r\n                                        <div className=\"error-msg\">\r\n                                            <small>{this.state.passwordError}</small>\r\n                                        </div>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <FormControl \r\n                                            type=\"password\" \r\n                                            placeholder=\"Confirm Password\" \r\n                                            name=\"confirmPassword\" \r\n                                            value={this.state.confirmPassword} \r\n                                            onChange={this.inputChangeHandler}\r\n                                        />\r\n                                        <div className=\"error-msg\">\r\n                                            <small>{this.state.confirmPasswordError}</small>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                            {\r\n                                this.state.username !== \"\" \r\n                                && this.state.email !== \"\" \r\n                                && this.state.password !== \"\"\r\n                                && this.state.confirmPassword === this.state.password  \r\n                                ?   <Link to=\"/\">\r\n                                        <Button \r\n                                            className=\"reg-button\" \r\n                                            variant=\"success\" \r\n                                            onClick={this.register}\r\n                                            block\r\n                                        >\r\n                                            Register\r\n                                        </Button>\r\n                                    </Link> \r\n                                :   <Button \r\n                                        className=\"reg-button\" \r\n                                        variant=\"success\" \r\n                                        onClick={this.register}\r\n                                        block\r\n                                    >\r\n                                        Register\r\n                                    </Button>\r\n                            }\r\n                            <hr/>\r\n                            <Link to=\"/\">\r\n                                <Button \r\n                                    className=\"reg-button\" \r\n                                    variant=\"info\" \r\n                                    block\r\n                                >\r\n                                    Sign In\r\n                                </Button>\r\n                            </Link>\r\n                            <p className=\"sign-in\">Registered already? Click <span>\"Sign In\"</span>.</p>\r\n                        </Form>\r\n                    </Jumbotron>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Registration;","import React from \"react\";\r\nimport { Form, FormGroup, FormControl, Button, Row, Col } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass CommentBox extends React.Component {\r\n    state = {\r\n        comment: \"\"\r\n    }\r\n    getComment = (e) => {\r\n        this.setState({\r\n            comment: e.target.value\r\n        })\r\n    }\r\n    addCommentHandler = () => {\r\n        let newComment = {\r\n            body: this.state.comment,\r\n            user: this.props.user.username,\r\n            post: this.props.post._id\r\n        }\r\n        if(this.state.comment === \"\") {\r\n            alert(\"This field can't be blank\");\r\n        } else {\r\n            this.props.addComment(newComment, this.props.post._id);\r\n        }\r\n    }\r\n    render() {\r\n        return(\r\n            <div id=\"comment-box\">\r\n                <Form>\r\n                    <Row>\r\n                        <Col md={9}>\r\n                            <FormGroup>\r\n                                <FormControl\r\n                                    as=\"textarea\" \r\n                                    rows=\"1\" \r\n                                    placeholder=\"Comment here\" \r\n                                    onChange={this.getComment}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={3}>\r\n                            <Button\r\n                                id=\"comment-button\"\r\n                                variant=\"success\" \r\n                                size=\"sm\" \r\n                                onClick={this.addCommentHandler}\r\n                            >\r\n                                {\r\n                                    this.state.comment !== \"\" \r\n                                    ? <Link to={\"/posts/\" + this.props.post._id}>Comment</Link>\r\n                                    : \"Comment\"\r\n                                }\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CommentBox;","import React, { useContext } from \"react\";\r\nimport MyContext from \"../MyContext\";\r\nimport { Row, Col, Image, Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CommentBox from \"../Comments/CommentBox\";\r\nimport { HandThumbsUp } from \"react-bootstrap-icons\";\r\n\r\nconst Post = (props) => {\r\n    const {\r\n        addComment, \r\n        user,\r\n        likePost\r\n    } = useContext(MyContext);\r\n    const likePostHandler = () => {\r\n        console.log(JSON.parse(localStorage.getItem(\"appUser\"))._id);\r\n        likePost(JSON.parse(localStorage.getItem(\"appUser\"))._id, props.post._id);\r\n    }\r\n    return(\r\n        <div id=\"post\">\r\n            <Row>\r\n                <Col md={4} id=\"image-container\">\r\n                    <Image \r\n                        src={props.post.image} \r\n                        alt=\"Image goes here\" \r\n                        thumbnail\r\n                    />\r\n                </Col>\r\n                <Col id=\"post-body\" md={8}>\r\n                    <div id=\"button-div\">\r\n                        {\r\n                            props.post.user.username === JSON.parse(localStorage.getItem(\"appUser\")).username ?\r\n                            <Button\r\n                                variant=\"outline-danger\" \r\n                                size=\"sm\" \r\n                                id={props.post._id} \r\n                                onClick={props.deletePost}\r\n                            >\r\n                                x\r\n                            </Button> : \r\n                            \"\"\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        <strong>{props.post.user.username}:</strong> {props.post.body.substring(0, 100)}\r\n                    </div>\r\n                    <hr/>\r\n                    <div id=\"post-detail-link\">\r\n                        <Row>\r\n                            <Col>\r\n                                <Link to={\"/posts/\" + props.post._id}>\r\n                                    read more\r\n                                </Link>\r\n                            </Col>\r\n                            <Col id=\"comment-link\">\r\n                                <Link to={\"/posts/\" + props.post._id}>\r\n                                    <span>Comments: ({props.post.comments.length})</span>\r\n                                </Link>\r\n                            </Col>\r\n                            <Col id=\"like-btn\">\r\n                                <Button\r\n                                    variant=\"light\"\r\n                                    size=\"sm\"\r\n                                    id={props.post._id}\r\n                                    onClick={likePostHandler}\r\n                                >\r\n                                    <span><HandThumbsUp/></span>\r\n                                </Button>\r\n                                <span> {props.post.thumbsUp.length}</span>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                    <CommentBox\r\n                        post={props.post} \r\n                        addComment={addComment} \r\n                        user={user}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, { useContext } from \"react\";\r\nimport MyContext from \"../MyContext\";\r\nimport Post from \"./Post\";\r\nimport { Container, Col } from \"react-bootstrap\";\r\n\r\nconst Posts = () => {\r\n    const {\r\n        posts, \r\n        user, \r\n        deletePost\r\n    } = useContext(MyContext);\r\n    let allPosts = posts.map(post => {\r\n        return(\r\n            <Post\r\n                key={post._id} \r\n                post={post} \r\n                user={user} \r\n                deletePost={deletePost}\r\n            />\r\n        )\r\n    })\r\n    return(\r\n        <div id=\"all-post\">\r\n            <Col id=\"posts-container\" lg={6}>\r\n                <Container>\r\n                    {allPosts}\r\n                </Container>\r\n            </Col>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Posts;","import React from \"react\";\r\nimport { Container, Col, Row, Image } from \"react-bootstrap\";\r\n\r\nconst PostDetail = (props) => {\r\n    let postComments = props.post.comments.map(comment => {\r\n        return(\r\n            <div key={comment._id} className=\"comment-body\">\r\n                    <strong>{comment.user}: </strong> {comment.body}<br/>\r\n            </div>\r\n        )\r\n    })\r\n    return(\r\n        <div id=\"post-detail\">\r\n            <Col id=\"post-detail-container\" lg={6}>\r\n                <Container>\r\n                    <Row>\r\n                        <Image\r\n                            src={props.post.image} \r\n                            alt=\"Image goes here\"\r\n                            thumbnail  \r\n                            fluid\r\n                        />\r\n                    </Row>\r\n                    <Row className=\"post-body-detail\">\r\n                        <div>\r\n                            <strong>{props.post.user.username}:</strong> {props.post.body}\r\n                        </div>\r\n                    </Row>\r\n                    {\r\n                        props.post.comments.length > 0 ?\r\n                        <Row>\r\n                            <div id=\"comment-header\"><strong>Comments:</strong></div>\r\n                        </Row> :\r\n                        \"\"\r\n                    }\r\n                    <Row id=\"comment-row\">\r\n                        {postComments}\r\n                    </Row>\r\n                </Container>\r\n            </Col>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostDetail;","import React from \"react\";\r\nimport { Container, Col, Form, FormGroup, FormControl, Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass CreatePost extends React.Component {\r\n    state = {\r\n        newPost: \"\",\r\n        newImage: \"\"\r\n    }\r\n    getPost = (e) => {\r\n        let newPost = e.target.value;\r\n        this.setState({\r\n            newPost: newPost\r\n        })\r\n    }\r\n    getImage = (e) => {\r\n        this.setState({\r\n            newImage: e.target.value\r\n        })\r\n    }\r\n    addPostHandler = () => {\r\n        let newPost = {\r\n            user: this.props.user._id,\r\n            body: this.state.newPost,\r\n            image: this.state.newImage\r\n        }\r\n        this.props.addPost(newPost);\r\n    }\r\n    render() {\r\n        return(\r\n            <div id=\"create-post\">\r\n                <Col id=\"create-post-container\" lg={6}>\r\n                    <Container>\r\n                        <Form>\r\n                            <FormGroup>\r\n                                <FormControl \r\n                                    as=\"textarea\" \r\n                                    rows=\"3\" \r\n                                    placeholder=\"Type your post here.\" \r\n                                    onChange={this.getPost}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <FormControl \r\n                                    type=\"text\" \r\n                                    placeholder=\"Image URL\" \r\n                                    onChange={this.getImage}\r\n                                />\r\n                            </FormGroup>\r\n                            <Col id=\"submit-post\" lg={1} xs={1}>\r\n                                <Button \r\n                                    variant=\"success\" \r\n                                    onClick={this.addPostHandler}\r\n                                >\r\n                                    <Link to=\"/\">Post</Link>\r\n                                </Button>\r\n                            </Col>\r\n                        </Form>\r\n                    </Container>\r\n                </Col>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreatePost;","import React, { useContext } from 'react';\nimport './App.css';\nimport MyContext from './MyContext';\nimport { Route } from \"react-router-dom\";\nimport NavbarBS from \"./Navigation/NavbarBS\";\nimport Home from \"./Homepage/Home\";\nimport Registration from \"./Registration/Registration\";\nimport Posts from \"./Posts/Posts\";\nimport PostDetail from \"./Posts/PostDetail\";\nimport CreatePost from \"./Posts/CreatePost\";\n\nconst App = () => {\n  const {\n    isLoggedin,\n    user,\n    userCredential,\n    logout,\n    posts,\n    addPost\n  } = useContext(MyContext);\n  const showPost = posts.map(post => {\n    return(\n      <Route path={\"/posts/\" + post._id} key={post._id}>\n        <PostDetail post={post}/>\n      </Route>\n    )\n  })\n  return (\n    <div>\n      {\n        isLoggedin\n        ?\n        <div>\n          <NavbarBS\n            logout={logout} \n            user={user}\n          />\n          <Route path=\"/\" exact>\n            <Posts/>\n          </Route>\n          {showPost}\n          <Route path=\"/create-post\">\n            <CreatePost\n              addPost={addPost} \n              user={user}\n            />\n          </Route>\n        </div>\n        :\n        <div>\n          <Route path=\"/\" exact>\n            <Home\n              user={user} \n              userCredential={userCredential}\n            />\n          </Route>\n          <Route path=\"/registration\">\n            <Registration\n              userCredential={userCredential}\n            />\n          </Route>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport MyContext from \"./MyContext\";\r\nimport axios from \"axios\";\r\n\r\nclass MyProvider extends React.Component {\r\n\r\n    userCredential = (email, password) => {\r\n        axios.post(\"https://socmed-pbexam.herokuapp.com/users/login\", {\r\n            email: email,\r\n            password: password\r\n        })\r\n        .then(res => {\r\n            if(res.data.error) {\r\n                alert(\"Invalid email/password\");\r\n            } else {\r\n                localStorage.setItem(\"appUser\", JSON.stringify(res.data));\r\n                this.setState({\r\n                    user: res.data,\r\n                    isLoggedin: true\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    logout = () => {\r\n        localStorage.removeItem(\"appUser\");\r\n        this.setState({\r\n            isLoggedin: false\r\n        })\r\n    }\r\n\r\n    addPost = (post) => {\r\n        axios.post(\"https://socmed-pbexam.herokuapp.com/posts\", {\r\n            post: post\r\n        })\r\n        .then(res => {\r\n            let newPost = [res.data, ...this.state.posts];\r\n            this.setState({\r\n                posts: newPost\r\n            })\r\n        })\r\n    }\r\n\r\n    deletePost = (e) => {\r\n        let allPosts = [...this.state.posts];\r\n        allPosts.map(post => {\r\n            if(e.target.id === post._id) {\r\n                allPosts.splice(allPosts.indexOf(post), 1);\r\n            }\r\n            return allPosts;\r\n        })\r\n        this.setState({\r\n            posts: allPosts\r\n        })\r\n        axios.delete(\"https://socmed-pbexam.herokuapp.com/posts/\" + e.target.id)\r\n    }\r\n\r\n    addComment = (comment, postId) => {\r\n        axios.post(\"https://socmed-pbexam.herokuapp.com/comments\", {\r\n            comment: comment\r\n        })\r\n        .then(() => {\r\n            let postComments = [...this.state.posts];\r\n            postComments.map(post => {\r\n                if(post._id === postId) {\r\n                    post.comments.push(comment);\r\n                }\r\n                return post;\r\n            })\r\n            this.setState({\r\n                posts: postComments\r\n            })\r\n        })\r\n    }\r\n\r\n    likePost = (user, postId) => {\r\n        axios.post(\"https://socmed-pbexam.herokuapp.com/likes\", {\r\n           user: user,\r\n           post: postId\r\n        })\r\n        .then(() => {\r\n            let likedPost = [...this.state.posts];\r\n            likedPost.map(post => {\r\n                if(post._id === postId) {\r\n                    post.thumbsUp.push(user);\r\n                }\r\n                return post;\r\n            })\r\n            this.setState({\r\n                posts: likedPost\r\n            })\r\n            console.log(this.state.posts);\r\n        })\r\n    }\r\n\r\n    state = {\r\n        isLoggedin: localStorage.getItem(\"appUser\") ? true : false,\r\n        user: localStorage.getItem(\"appUser\") ? JSON.parse(localStorage.getItem(\"appUser\")) : {},\r\n        posts: [],\r\n        userCredential: this.userCredential,\r\n        logout: this.logout,\r\n        addPost: this.addPost,\r\n        deletePost: this.deletePost,\r\n        addComment: this.addComment,\r\n        likePost: this.likePost\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios(\"https://socmed-pbexam.herokuapp.com/posts\")\r\n        .then(res => {\r\n            let posts = res.data;\r\n            this.setState({\r\n                posts: posts\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        \r\n        return(\r\n            <MyContext.Provider value={this.state}>\r\n                {this.props.children}\r\n            </MyContext.Provider>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default MyProvider;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from \"react-router-dom\";\nimport MyProvider from './MyProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyProvider>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </MyProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}